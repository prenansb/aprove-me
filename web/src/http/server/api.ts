/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Nodejs example
 * The nodejs API description
 * OpenAPI spec version: 1.0
 */
import { http } from '../server'
import type {
  AssignorControllerCreate201,
  AssignorControllerDelete200,
  AssignorControllerGetById200,
  AssignorControllerListAll200Item,
  AssignorControllerUpdate200,
  AuthDto,
  Authenticate200,
  CreateAssignorDto,
  CreatePayableAndAssignorDto,
  CreatePayableDto,
  UpdateAssignorDto,
  UpdatePayableDto,
} from './api.schemas'

/**
 * @summary Create Assignor
 */
export const getAssignorControllerCreateUrl = () => {
  return `/integrations/assignor/create`
}

export const assignorControllerCreate = async (
  createAssignorDto: CreateAssignorDto,
  options?: RequestInit,
): Promise<AssignorControllerCreate201> => {
  return http<Promise<AssignorControllerCreate201>>(getAssignorControllerCreateUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(createAssignorDto),
  })
}

/**
 * @summary Get All Assignors
 */
export const getAssignorControllerListAllUrl = () => {
  return `/integrations/assignor/list`
}

export const assignorControllerListAll = async (
  options?: RequestInit,
): Promise<AssignorControllerListAll200Item[]> => {
  return http<Promise<AssignorControllerListAll200Item[]>>(
    getAssignorControllerListAllUrl(),
    {
      ...options,
      method: 'GET',
    },
  )
}

/**
 * @summary Get Assignor By Id
 */
export const getAssignorControllerGetByIdUrl = (id: string) => {
  return `/integrations/assignor/${id}`
}

export const assignorControllerGetById = async (
  id: string,
  options?: RequestInit,
): Promise<AssignorControllerGetById200> => {
  return http<Promise<AssignorControllerGetById200>>(
    getAssignorControllerGetByIdUrl(id),
    {
      ...options,
      method: 'GET',
    },
  )
}

/**
 * @summary Update Assignor By Id
 */
export const getAssignorControllerUpdateUrl = (id: string) => {
  return `/integrations/assignor/${id}`
}

export const assignorControllerUpdate = async (
  id: string,
  updateAssignorDto: UpdateAssignorDto,
  options?: RequestInit,
): Promise<AssignorControllerUpdate200> => {
  return http<Promise<AssignorControllerUpdate200>>(getAssignorControllerUpdateUrl(id), {
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(updateAssignorDto),
  })
}

/**
 * @summary Delete Assignor By Id
 */
export const getAssignorControllerDeleteUrl = (id: string) => {
  return `/integrations/assignor/${id}`
}

export const assignorControllerDelete = async (
  id: string,
  options?: RequestInit,
): Promise<AssignorControllerDelete200> => {
  return http<Promise<AssignorControllerDelete200>>(getAssignorControllerDeleteUrl(id), {
    ...options,
    method: 'DELETE',
  })
}

/**
 * @summary Create Payable and Assignor
 */
export const getPayableControllerCreatePayableAndAssignorUrl = () => {
  return `/integrations/payable`
}

export const payableControllerCreatePayableAndAssignor = async (
  createPayableAndAssignorDto: CreatePayableAndAssignorDto,
  options?: RequestInit,
): Promise<void> => {
  return http<Promise<void>>(getPayableControllerCreatePayableAndAssignorUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(createPayableAndAssignorDto),
  })
}

/**
 * @summary Create Payable
 */
export const getPayableControllerCreateUrl = () => {
  return `/integrations/payable/create`
}

export const payableControllerCreate = async (
  createPayableDto: CreatePayableDto,
  options?: RequestInit,
): Promise<void> => {
  return http<Promise<void>>(getPayableControllerCreateUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(createPayableDto),
  })
}

/**
 * @summary Get Payable By Id
 */
export const getPayableControllerGetByIdUrl = (id: string) => {
  return `/integrations/payable/${id}`
}

export const payableControllerGetById = async (
  id: string,
  options?: RequestInit,
): Promise<void> => {
  return http<Promise<void>>(getPayableControllerGetByIdUrl(id), {
    ...options,
    method: 'GET',
  })
}

/**
 * @summary Update Payable By Id
 */
export const getPayableControllerUpdateUrl = (id: string) => {
  return `/integrations/payable/${id}`
}

export const payableControllerUpdate = async (
  id: string,
  updatePayableDto: UpdatePayableDto,
  options?: RequestInit,
): Promise<void> => {
  return http<Promise<void>>(getPayableControllerUpdateUrl(id), {
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(updatePayableDto),
  })
}

/**
 * @summary Delete Payable By Id
 */
export const getPayableControllerDeleteUrl = (id: string) => {
  return `/integrations/payable/${id}`
}

export const payableControllerDelete = async (
  id: string,
  options?: RequestInit,
): Promise<void> => {
  return http<Promise<void>>(getPayableControllerDeleteUrl(id), {
    ...options,
    method: 'DELETE',
  })
}

/**
 * @summary Authenticate User
 */
export const getAuthenticateUrl = () => {
  return `/integrations/auth/login`
}

export const authenticate = async (
  authDto: AuthDto,
  options?: RequestInit,
): Promise<Authenticate200> => {
  return http<Promise<Authenticate200>>(getAuthenticateUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(authDto),
  })
}

/**
 * @summary Create User
 */
export const getAuthControllerSignupUrl = () => {
  return `/integrations/auth/signup`
}

export const authControllerSignup = async (
  authDto: AuthDto,
  options?: RequestInit,
): Promise<void> => {
  return http<Promise<void>>(getAuthControllerSignupUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(authDto),
  })
}
